#!/usr/bin/python

import sys, os, platform, commands, stat, signal, optparse
import json, select, socket
from PySide import QtCore, QtGui

config = {
  # assume that we're debugging a Fabric app and try to connect
  'connectFabric': True,

  # only show KL code in the source code list
  'onlyShowKLCode': True,

  # do some limited client-side interpretation for Fabric types
  'interpretFabricTypes': True,
}

# must use optparse over argparse to support python 2.6
parser = optparse.OptionParser(usage="Usage: zBug [options] [<executable> [<arg> ...]]")
parser.disable_interspersed_args()
parser.add_option("-p", "--pid", dest="pid",
                  help="attach to running process with pid PID", metavar="PID")
(options, arguments) = parser.parse_args()

#----------------------------------------------------------------------
# Code that auto imports LLDB (from LLDB source code)
#----------------------------------------------------------------------
try:
  # Just try for LLDB in case PYTHONPATH is already correctly setup
  import lldb
except ImportError:
  lldb_python_dirs = list()
  # lldb is not in the PYTHONPATH, try some defaults for the current platform
  platform_system = platform.system()
  if platform_system == 'Darwin':
    # On Darwin, try the currently selected Xcode directory
    xcode_dir = commands.getoutput("xcode-select --print-path")
    if xcode_dir:
      lldb_python_dirs.append(os.path.realpath(xcode_dir + '/../SharedFrameworks/LLDB.framework/Resources/Python'))
      lldb_python_dirs.append(xcode_dir + '/Library/PrivateFrameworks/LLDB.framework/Resources/Python')
    lldb_python_dirs.append('/System/Library/PrivateFrameworks/LLDB.framework/Resources/Python')
  success = False
  for lldb_python_dir in lldb_python_dirs:
    if os.path.exists(lldb_python_dir):
      if not (sys.path.__contains__(lldb_python_dir)):
        sys.path.append(lldb_python_dir)
        try:
          import lldb
        except ImportError:
          pass
        else:
          success = True
          break
  if not success:
    print "error: couldn't locate the 'lldb' module, please set PYTHONPATH correctly"
    sys.exit(1)

debugger = lldb.SBDebugger.Create()
debugger.SetAsync(True)

app = QtGui.QApplication([])
app.setOrganizationName("zBug")
app.setApplicationName("zBug")
app.setApplicationVersion("1.11.4")

settings = QtCore.QSettings()

font = QtGui.QFont()
font.setPointSize(12)
font.setFamily("Courier")

fabricSourceCode = {}

class LineNumberArea(QtGui.QWidget):
  def __init__(self, sourceCodeDisplayWidget):
    QtGui.QWidget.__init__(self, sourceCodeDisplayWidget)
    self.__sourceCodeDisplayWidget = sourceCodeDisplayWidget

  def sizeHint(self):
    return QtCore.QSize(self.__sourceCodeDisplayWidget.lineNumberAreaWidth(), 0)

  def paintEvent(self, event):
    self.__sourceCodeDisplayWidget.lineNumberAreaPaintEvent(event)

  def mousePressEvent(self, event):
    self.__sourceCodeDisplayWidget.lineNumberAreaClickEvent(event)

class CodeDisplayWidget(QtGui.QPlainTextEdit):
  def __init__(self):
    QtGui.QPlainTextEdit.__init__(self)

    self.setReadOnly(True)
    self.setFont(font)
    self.setCenterOnScroll(True)

    lineNumberArea = LineNumberArea(self)
    self.__lineNumberArea = lineNumberArea

    self.__marginLabels = [" "]
    self.__maxMarginLabelLen = 1

    def updateLineNumberArea(rect, dy):
      if dy != 0:
        lineNumberArea.scroll(0, dy)
      else:
        lineNumberArea.update(0, rect.y(), lineNumberArea.width(), rect.height())

      if rect.contains(self.viewport().rect()):
        self.updateLineNumberAreaWidth()
    self.updateRequest.connect(updateLineNumberArea)

  def resizeEvent(self, event):
    QtGui.QWidget.resizeEvent(self, event)
    cr = self.contentsRect()
    self.__lineNumberArea.setGeometry(
      QtCore.QRect(cr.left(), cr.top(), self.lineNumberAreaWidth(), cr.height())
      )

  def lineNumberAreaWidth(self):
    return 3 + self.fontMetrics().width('X') * self.__maxMarginLabelLen + 3

  def updateLineNumberAreaWidth(self):
    self.setViewportMargins(self.lineNumberAreaWidth(), 0, 0, 0)

  def lineNumberAreaClickEvent(self, event):
    pass

  def lineNumberAreaPaintEvent(self, event):
    lineNumberArea = self.__lineNumberArea
    painter = QtGui.QPainter(lineNumberArea)
    painter.fillRect(event.rect(), QtCore.Qt.lightGray)
    block = self.firstVisibleBlock()
    blockNumber = block.blockNumber()
    top = int(self.blockBoundingGeometry(block).translated(self.contentOffset()).top())
    bottom = top + int(self.blockBoundingRect(block).height())
    while block.isValid() and top <= event.rect().bottom():
      if block.isVisible() and bottom >= event.rect().top():
        marginLabel = self.__marginLabels[blockNumber]
        painter.setPen(QtCore.Qt.black)
        painter.drawText(
          0, top,
          lineNumberArea.width() - 3, self.fontMetrics().height(),
          QtCore.Qt.AlignRight, marginLabel
          )
      block = block.next()
      top = bottom
      bottom = top + int(self.blockBoundingRect(block).height())
      blockNumber = blockNumber + 1

  def highlightLine(self, lineNumber):
    document = self.document()
    block = document.findBlockByLineNumber(lineNumber)
    textCursor = self.textCursor()
    textCursor.setPosition(block.position())
    self.setTextCursor(textCursor)

    selection = QtGui.QTextEdit.ExtraSelection()
    lineColor = QtGui.QColor(QtCore.Qt.yellow).lighter(160)
    selection.format.setBackground(lineColor)
    selection.format.setProperty(QtGui.QTextFormat.FullWidthSelection, True)
    selection.cursor = textCursor
    selection.cursor.clearSelection()
    self.setExtraSelections([selection]);

  def setContents(self, contents):
    self.__marginLabels = []
    self.__maxMarginLabelLen = 1
    self.clear()
    if len(contents) == 0:
      contents = [[" ", ""]]
    for contentItem in contents:
      self.__marginLabels.append(contentItem[0])
      marginLabelLen = len(contentItem[0])
      if marginLabelLen > self.__maxMarginLabelLen:
        self.__maxMarginLabelLen = marginLabelLen
      self.appendPlainText(contentItem[1])
    self.setViewportMargins(self.lineNumberAreaWidth(), 0, 0, 0)

class SourceCodeDisplayWidget(QtGui.QPlainTextEdit):
  def __init__(self, parent=None):
    QtGui.QPlainTextEdit.__init__(self, parent)

    self.pathname = None

    self.setReadOnly(True)
    self.setFont(font)
    self.setCenterOnScroll(True)

    lineNumberArea = LineNumberArea(self)
    self.__lineNumberArea = lineNumberArea

    self.__highlightLine = 0
    self.__breakpointLines = []

    def updateLineNumberAreaWidth(newBlockCount):
      self.setViewportMargins(self.lineNumberAreaWidth(), 0, 0, 0)
    self.blockCountChanged.connect(updateLineNumberAreaWidth)

    def updateLineNumberArea(rect, dy):
      if dy != 0:
        lineNumberArea.scroll(0, dy)
      else:
        lineNumberArea.update(0, rect.y(), lineNumberArea.width(), rect.height())

      if rect.contains(self.viewport().rect()):
        updateLineNumberAreaWidth(0)
    self.updateRequest.connect(updateLineNumberArea)

    updateLineNumberAreaWidth(0)

    self.__breakpointsWidget = None
    self.updateDisplay("", 0)

  def resizeEvent(self, event):
    QtGui.QWidget.resizeEvent(self, event)
    cr = self.contentsRect()
    self.__lineNumberArea.setGeometry(
      QtCore.QRect(cr.left(), cr.top(), self.lineNumberAreaWidth(), cr.height())
      )

  def lineNumberAreaWidth(self):
    digits = 1
    max = self.blockCount()
    if max < 1:
      max = 1
    while max >= 10:
      max = max / 10
      digits = digits + 1
    return 3 + self.fontMetrics().width('9') * digits + 3

  def setBreakpointsWidget(self, widget):
    self.__breakpointsWidget = widget

  def lineNumberAreaClickEvent(self, event):
    firstBlock = self.firstVisibleBlock()
    blockHeight = self.blockBoundingRect(firstBlock).height()
    blockNum = int(event.y() / blockHeight) + firstBlock.blockNumber()
    lineNum = blockNum+1
    if self.__breakpointsWidget is not None:
      self.__breakpointsWidget.toggleBreakpoint(self.pathname, lineNum)

  def lineNumberAreaPaintEvent(self, event):
    lineNumberArea = self.__lineNumberArea
    painter = QtGui.QPainter(lineNumberArea)
    painter.fillRect(event.rect(), QtCore.Qt.lightGray)
    block = self.firstVisibleBlock()
    blockNumber = block.blockNumber()
    top = int(self.blockBoundingGeometry(block).translated(self.contentOffset()).top())
    bottom = top + int(self.blockBoundingRect(block).height())
    while block.isValid() and top <= event.rect().bottom():
      if block.isVisible() and bottom >= event.rect().top():
        blockNumberText = str(blockNumber + 1)
        painter.setPen(QtCore.Qt.black)
        painter.drawText(
          0, top,
          lineNumberArea.width() - 3, self.fontMetrics().height(),
          QtCore.Qt.AlignRight, blockNumberText
          )
      block = block.next()
      top = bottom
      bottom = top + int(self.blockBoundingRect(block).height())
      blockNumber = blockNumber + 1

  def markBreakpointLines(self, lines):
    self.__breakpointLines = lines
    self.addHighlights()

  def highlightLine(self, lineNumber):
    self.__highlightLine = lineNumber
    self.addHighlights()

  def addHighlights(self):
    selections = []
    document = self.document()

    for lineNumber in self.__breakpointLines:
      block = document.findBlockByLineNumber(lineNumber)
      textCursor = self.textCursor()
      textCursor.setPosition(block.position())
      self.setTextCursor(textCursor)

      selection = QtGui.QTextEdit.ExtraSelection()
      lineColor = QtGui.QColor(QtCore.Qt.red).lighter(160)
      selection.format.setBackground(lineColor)
      selection.format.setProperty(QtGui.QTextFormat.FullWidthSelection, True)
      selection.cursor = textCursor
      selection.cursor.clearSelection()
      selections.append(selection)

    if self.__highlightLine > 0:
      block = document.findBlockByLineNumber(self.__highlightLine)
      textCursor = self.textCursor()
      textCursor.setPosition(block.position())
      self.setTextCursor(textCursor)

      selection = QtGui.QTextEdit.ExtraSelection()
      lineColor = QtGui.QColor(QtCore.Qt.yellow).lighter(160)
      selection.format.setBackground(lineColor)
      selection.format.setProperty(QtGui.QTextFormat.FullWidthSelection, True)
      selection.cursor = textCursor
      selection.cursor.clearSelection()
      selections.append(selection)

    self.setExtraSelections(selections)

  def updateDisplay(self, pathname, lineNumber):
    newPathname = pathname != self.pathname
    self.pathname = pathname

    if len(pathname) > 0:
      if newPathname:
        contents = None
        if config['connectFabric']:
          if pathname.find("(internal)") != -1:
            contents = "Internal KL function, no source code available."
          elif fabricSourceCode.has_key(pathname):
            contents = fabricSourceCode[pathname]
          elif fabricSourceCode.has_key(os.path.basename(pathname)):
            contents = fabricSourceCode[os.path.basename(pathname)]

        if contents is None:
          try:
            f = open(pathname, 'r')
            contents = f.read()
            f.close()
          except IOError as e:
            contents = "Unable to read file:\n  %s\n" % str(e)
            lineNumber = 0
        self.setPlainText(contents)
        if self.parent() is not None:
          self.parent().setTitle(os.path.basename(pathname))
    else:
      self.setPlainText("No source code for this location")
      lineNumber = 0

    if lineNumber >= 1:
      self.highlightLine(lineNumber - 1)
    else:
      self.highlightLine(0)

    if self.__breakpointsWidget is not None:
      self.__breakpointsWidget.markBreakpoints()

  def updateDisplayForLineEntry(self, lineEntry):
    fileSpec = lineEntry.GetFileSpec()
    if fileSpec.GetFilename():
      pathname = str(fileSpec)
    else:
      pathname = ""
    lineNumber = lineEntry.GetLine()
    self.updateDisplay(pathname, lineNumber)

sourceCodeDisplayWidget = SourceCodeDisplayWidget()
sourceCodeDisplayWidget.setMinimumSize(640, 480)

class DisassemblyDisplayWidget(CodeDisplayWidget):
  def __init__(self):
    CodeDisplayWidget.__init__(self)

  def frame(self):
    return self.__frame

  def setFrame(self, frame):
    self.__frame = frame
    pc = frame.GetPC()
    pcAddress = frame.GetPCAddress()

    thread = frame.GetThread()
    process = thread.GetProcess()
    target = process.GetTarget()

    function = frame.GetFunction()
    if function:
      instructions = function.GetInstructions(target)
    else:
      symbol = frame.GetSymbol()
      if symbol:
        instructions = symbol.GetInstructions(target)
      else:
        data = lldb.SBData()
        error = lldb.SBError()
        data = bytearray(frame.GetThread().GetProcess().ReadMemory(pc, 1024, error))
        instructions = target.GetInstructions(pcAddress, data)

    self.clear()
    count = instructions.GetSize()
    contents = []
    lineCount = 0
    lineNumberToHighlight = None
    for i in range(0, count):
      instruction = instructions.GetInstructionAtIndex(i)
      address = instruction.GetAddress()
      loadAddress = address.GetLoadAddress(target)
      if loadAddress < pc - 256 or loadAddress > pc + 256:
        continue
      if loadAddress == pc:
        lineNumberToHighlight = lineCount
      mnemonic = instruction.GetMnemonic(target)
      operands =  instruction.GetOperands(target)
      comment =  instruction.GetComment(target)
      desc = "%-8s %s" % (mnemonic, operands)
      if comment:
        if len(desc) < 32:
          desc += ' ' * (32 - len(desc))
        desc += "; %s" % comment
      contents.append(["%#x" % loadAddress, desc])
      lineCount += 1
    self.setContents(contents)

    if lineNumberToHighlight != None:
      self.highlightLine(lineNumberToHighlight)
    else:
      self.setExtraSelections([])

disassemblyDisplayWidget = DisassemblyDisplayWidget()

class ValueWidgetItem(QtGui.QTreeWidgetItem):
  def __init__(self, includeExtras):
    QtGui.QTreeWidgetItem.__init__(self)

    self.__value = None
    self.__expanded = False
    self.__childItems = {}
    self.__includeExtras = includeExtras

    self.setFlags(
      QtCore.Qt.ItemIsEnabled | QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEditable
      )
    self.setFont(0, font)
    self.setFont(1, font)
    if includeExtras:
      self.setFont(2, font)

    self.__dynamicColor = QtGui.QColor(QtCore.Qt.red).lighter(190)

  def setValue(self, value):
    self.__value = value

  def wasExpanded(self):
    if not self.__expanded:
      self.__expanded = True
      self.refresh()

  def wasCollapsed(self):
    if self.__expanded:
      self.__expanded = False
      while self.childCount() > 0:
        child = self.takeChild(0)
        child.setValue(None)

  def hasChanged(self):
    error = lldb.SBError()
    self.__value.SetValueFromCString(str(self.text(1)), error)
    self.refresh()

  def refresh(self):
    value = self.__value
    includeExtras = self.__includeExtras

    self.setText(0, value.GetName())

    typeName = value.GetTypeName()
    valueText = value.GetValue()
    summaryText = value.GetSummary()

    showChildren = True
    extraChildren = []
    if typeName is not None and config['interpretFabricTypes']:
      if typeName == 'String':
        flags = value.GetChildMemberWithName('indFlagAndLength')
        u = value.GetChildMemberWithName('u')
        if int(flags.GetValue()) & 0x80000000:
          value = u.GetChildMemberWithName('ind').GetChildMemberWithName('dataPtr')
        else:
          value = u.GetChildMemberWithName('dir').GetChildMemberWithName('data')
        valueText = value.GetSummary()
        summaryText = ''
        showChildren = False
      elif '[]' in typeName:
        size = value.GetChildMemberWithName('size')
        elements = value.GetChildMemberWithName('elements')
        if size.IsValid() and elements.IsValid():
          size = size.GetValue()
          if not size is None:
            elemtype = elements.GetChildAtIndex(0).GetType()
            size = int(size)
            # limit max displayed array size
            if size > 1024:
              size = 1024
            for num in range(size):
              name = '['+str(num)+']'
              data = elements.GetPointeeData(num)
              elem = elements.CreateValueFromData(name, data, elemtype)
              extraChildren.append(elem)

    self.setText(1, valueText)
    if value.GetValueDidChange():
      self.setBackground(1, self.__dynamicColor)
    else:
      self.setBackground(1, self.background(0))

    if includeExtras:
      self.setText(2, summaryText)
      if value.GetValueDidChange():
        self.setBackground(2, self.__dynamicColor)
      else:
        self.setBackground(2, self.background(0))

    self.setText(3, typeName)

    if not showChildren:
      return

    childCount = value.GetNumChildren()
    if childCount > 0:
      self.setChildIndicatorPolicy(QtGui.QTreeWidgetItem.ShowIndicator)
    else:
      self.setChildIndicatorPolicy(QtGui.QTreeWidgetItem.DontShowIndicator)

    while self.childCount() > 0:
      topLevelItem = self.takeChild(0)
      topLevelItem.setValue(None)

    if self.__expanded:
      for i in range(0, childCount):
        childValue = value.GetChildAtIndex(i)
        childValueName = childValue.GetName()
        if childValueName is None:
          continue
        if childValueName in self.__childItems:
          childValueWidgetItem = self.__childItems[childValueName]
        else:
          childValueWidgetItem = ValueWidgetItem(self.__includeExtras)
          self.__childItems[childValueName] = childValueWidgetItem
        childValueWidgetItem.setValue(childValue)
        self.addChild(childValueWidgetItem)
        childValueWidgetItem.refresh()

      for c in extraChildren:
        childValueName = c.GetName()
        if childValueName in self.__childItems:
          childValueWidgetItem = self.__childItems[childValueName]
        else:
          childValueWidgetItem = ValueWidgetItem(self.__includeExtras)
          self.__childItems[childValueName] = childValueWidgetItem
        childValueWidgetItem.setValue(c)
        self.addChild(childValueWidgetItem)
        childValueWidgetItem.refresh()
       
      self.treeWidget().expandItem(self)

class LocalsWidget(QtGui.QTreeWidget):
  def __init__(self):
    QtGui.QTreeWidget.__init__(self)

    self.__topLevelItems = {}

    self.setEnabled(False)
    self.setIndentation(12)
    self.setHeaderLabels([
      "Name",
      "Value",
      "Details",
      "Type"
    ])

    settings.beginGroup("LocalsWidget")
    self.setColumnWidth(0, int(settings.value("firstColumnWidth", 120)))
    self.setColumnWidth(1, int(settings.value("secondColumnWidth", 200)))
    settings.endGroup()

    def itemExpanded(item):
      item.wasExpanded()
    self.itemExpanded.connect(itemExpanded)

    def itemCollapsed(item):
      item.wasCollapsed()
    self.itemCollapsed.connect(itemCollapsed)

    def itemWasDoubleClicked(item, column):
      if column == 1:
        self.editItem(item, column)
    self.itemDoubleClicked.connect(itemWasDoubleClicked)

    def itemHasChanged(item):
      item.hasChanged()
    self.itemChanged.connect(itemHasChanged)

  def hideEvent(self, event):
    settings.beginGroup("LocalsWidget")
    settings.setValue("firstColumnWidth", self.columnWidth(0))
    settings.setValue("secondColumnWidth", self.columnWidth(1))
    settings.endGroup()
    QtGui.QTreeWidget.hideEvent(self, event)

  def setFrame(self, frame):
    enabled = False

    if frame and frame.IsValid():
      while self.topLevelItemCount() > 0:
        topLevelItem = self.takeTopLevelItem(0)
        topLevelItem.setValue(None)

      includeArguments = True
      includeLocals = True
      includeStatics = True
      in_scope_only = True
      variables = frame.GetVariables(
        includeArguments,
        includeLocals,
        includeStatics,
        in_scope_only
        )

      variableCount = variables.GetSize()
      for i in range(0, variableCount):
        value = variables.GetValueAtIndex(i)
        valueName = value.GetName()
        if valueName in self.__topLevelItems:
          valueWidgetItem = self.__topLevelItems[valueName]
        else:
          valueWidgetItem = ValueWidgetItem(True)
          self.__topLevelItems[valueName] = valueWidgetItem
        valueWidgetItem.setValue(value)
        self.addTopLevelItem(valueWidgetItem)
        valueWidgetItem.refresh()

      enabled = True

    self.setEnabled(enabled)

localsWidget = LocalsWidget()

class RegistersWidget(QtGui.QTreeWidget):
  def __init__(self):
    QtGui.QTreeWidget.__init__(self)

    self.__topLevelItems = {}

    self.setEnabled(False)
    self.setIndentation(12)
    self.setHeaderLabels([
      "Name",
      "Value"
    ])

    settings.beginGroup("RegistersWidget")
    self.setColumnWidth(0, int(settings.value("firstColumnWidth", 80)))
    settings.endGroup()

    def itemExpanded(item):
      item.wasExpanded()
    self.itemExpanded.connect(itemExpanded)
    def itemCollapsed(item):
      item.wasCollapsed()
    self.itemCollapsed.connect(itemCollapsed)

  def hideEvent(self, event):
    settings.beginGroup("RegistersWidget")
    settings.setValue("firstColumnWidth", self.columnWidth(0))
    settings.endGroup()
    QtGui.QTreeWidget.hideEvent(self, event)

  def setFrame(self, frame):
    enabled = False

    if frame and frame.IsValid():
      while self.topLevelItemCount() > 0:
        topLevelItem = self.takeTopLevelItem(0)
        topLevelItem.setValue(None)

      registers = frame.GetRegisters()
      count = registers.GetSize()
      for i in range(0, count):
        value = registers.GetValueAtIndex(i)
        valueName = value.GetName()
        if valueName in self.__topLevelItems:
          valueWidgetItem = self.__topLevelItems[valueName]
        else:
          valueWidgetItem = ValueWidgetItem(includeExtras=False)
          self.__topLevelItems[valueName] = valueWidgetItem
        valueWidgetItem.setValue(value)
        self.addTopLevelItem(valueWidgetItem)
        valueWidgetItem.refresh()

      enabled = True

    self.setEnabled(enabled)

registersWidget = RegistersWidget()

class StackWidgetItem(QtGui.QTreeWidgetItem):
  def __init__(self, frame):
    QtGui.QTreeWidgetItem.__init__(self)

    self.__frame = frame

    self.setFont(0, font)
    self.setFont(1, font)
    self.setTextAlignment(1, QtCore.Qt.AlignRight)
    self.setFont(2, font)

    self.setText(0, "%d" % frame.GetFrameID())
    self.setText(1, "%#x" % frame.GetPC())
    self.setText(2, "%s" % (frame.GetFunctionName()))

  def frame(self):
    return self.__frame

class StackWidget(QtGui.QTreeWidget):
  def __init__(
    self,
    sourceCodeDisplayWidget,
    disassemblyDisplayWidget,
    localsWidget,
    registersWidget
    ):
    QtGui.QTreeWidget.__init__(self)

    self.__sourceCodeDisplayWidget = sourceCodeDisplayWidget
    self.__disassemblyDisplayWidget = disassemblyDisplayWidget
    self.__localsWidget = localsWidget
    self.__registersWidget = registersWidget

    self.setEnabled(False)
    self.setFocusPolicy(QtCore.Qt.NoFocus)
    self.setIndentation(0)
    self.setHeaderLabels([
      "#",
      "PC",
      "Location"
    ])

  def syncToSelectedItem(self):
    frame = None
    currentItem = self.currentItem()
    if currentItem:
      frameIndex = self.indexOfTopLevelItem(currentItem)
      target = debugger.GetSelectedTarget()
      if target and target.IsValid():
        process = target.GetProcess()
        if process and process.IsValid():
          thread = process.GetSelectedThread()
          thread.SetSelectedFrame(frameIndex)

          frame = thread.GetFrameAtIndex(frameIndex)
          self.__sourceCodeDisplayWidget.updateDisplayForLineEntry(
            frame.GetLineEntry()
            )
          self.__disassemblyDisplayWidget.setFrame(frame)
    self.__localsWidget.setFrame(frame)
    self.__registersWidget.setFrame(frame)

  def updateDisplay(self):
    self.setCurrentItem(None)
    enabled = False

    target = debugger.GetSelectedTarget()
    if target and target.IsValid():
      process = target.GetProcess()
      if process and process.IsValid() and process.GetState() == lldb.eStateStopped:
        thread = process.GetSelectedThread()
        if thread and thread.IsValid():
          count = thread.GetNumFrames()
          if count > 0:
            self.__process = process

            selectedFrame = thread.GetSelectedFrame()
            selectedFrameID = selectedFrame.GetFrameID()

            try:
              self.currentItemChanged.disconnect()
            except:
              pass
            self.clear()

            for i in range(0, count):
              frame = thread.GetFrameAtIndex(i)
              stackWidgetItem = StackWidgetItem(frame)
              self.addTopLevelItem(stackWidgetItem)
              if frame.GetFrameID() == selectedFrameID:
                self.setCurrentItem(stackWidgetItem)

            self.resizeColumnToContents(0)
            self.resizeColumnToContents(1)

            self.syncToSelectedItem()
            def currentItemChanged(newItem, oldItem):
              self.syncToSelectedItem()
            self.currentItemChanged.connect(currentItemChanged)

            enabled = True
    self.setEnabled(enabled)

stackWidget = StackWidget(
  sourceCodeDisplayWidget,
  disassemblyDisplayWidget,
  localsWidget,
  registersWidget
  )

class ThreadsWidgetItem(QtGui.QTreeWidgetItem):
  def __init__(self, thread):
    QtGui.QTreeWidgetItem.__init__(self)

    self.setFont(0, font)
    self.setFont(1, font)
    self.setFont(2, font)
    self.setFont(3, font)

    process = thread.GetProcess()
    frame = thread.GetFrameAtIndex(0)

    self.setText(0, "%u" % thread.GetIndexID())
    self.setText(1, "%#x" % thread.GetThreadID())
    self.setText(2, thread.GetName())
    locationDesc = "%s" % (frame.GetFunctionName())
    self.setText(3, locationDesc)

class ThreadsWidget(QtGui.QTreeWidget):
  def __init__(
    self,
    stackWidget
    ):
    QtGui.QTreeWidget.__init__(self)

    self.__stackWidget = stackWidget

    self.setEnabled(False)
    self.setFocusPolicy(QtCore.Qt.NoFocus)
    self.setIndentation(0)
    self.setHeaderLabels([
      "#",
      "TID",
      "Name",
      "Location"
    ])

    def currentItemChanged(newItem, oldItem):
      currentItem = self.currentItem()
      if currentItem:
        threadIndex = self.indexOfTopLevelItem(currentItem)
        target = debugger.GetSelectedTarget()
        if target and target.IsValid():
          process = target.GetProcess()
          if process and process.IsValid and process.GetState() == lldb.eStateStopped:
            thread = process.GetThreadAtIndex(int(threadIndex))
            process.SetSelectedThread(thread)
            self.__stackWidget.updateDisplay()
    self.currentItemChanged.connect(currentItemChanged)

  def updateDisplay(self):
    self.setCurrentItem(None)
    self.__process = None
    enabled = False

    target = debugger.GetSelectedTarget()
    if target and target.IsValid():
      process = target.GetProcess()
      if process and process.IsValid() and process.GetState() == lldb.eStateStopped:
        self.__process = process

        count = process.GetNumThreads()
        selectedThread = process.GetSelectedThread()
        selectedThreadID = selectedThread.GetThreadID()

        self.clear()
        for i in range(0, count):
          thread = process.GetThreadAtIndex(i)
          threadWidgetItem = ThreadsWidgetItem(thread)
          self.addTopLevelItem(threadWidgetItem)
          if thread.GetThreadID() == selectedThreadID:
            self.setCurrentItem(threadWidgetItem)

        self.resizeColumnToContents(0)
        self.resizeColumnToContents(1)

        enabled = True
    self.setEnabled(enabled)

threadsWidget = ThreadsWidget(stackWidget)

class AppendingTextWidget(QtGui.QTextEdit):
  def __init__(self):
    QtGui.QTextEdit.__init__(self)

    self.setReadOnly(True)
    self.setFont(font)

  def append(self, text, color):
    self.setTextColor(color)
    charFormat = self.currentCharFormat()
    textCursor = self.textCursor()
    textCursor.movePosition(QtGui.QTextCursor.End)
    textCursor.insertText(text, charFormat)
    self.setTextCursor(textCursor)
    self.ensureCursorVisible()

class OutputWidget(AppendingTextWidget):
  def __init__(self):
    AppendingTextWidget.__init__(self)

    self.__stdoutColor = QtGui.QColor(QtCore.Qt.black)
    self.__stderrColor = QtGui.QColor(QtCore.Qt.red).lighter(50)

  def appendStdout(self, text):
    self.append(text, self.__stdoutColor)

  def appendStderr(self, text):
    self.append(text, self.__stderrColor)

outputWidget = OutputWidget()

class SourcesFilterWidget(QtGui.QLineEdit):
  filterChanged = QtCore.Signal(basestring)

  def __init__(self):
    QtGui.QLineEdit.__init__(self)

    self.setFont(font)

    def returnPressed():
      text = self.text()
      self.selectAll()
      self.filterChanged.emit(text)
    self.returnPressed.connect(returnPressed)

sourcesFilterWidget = SourcesFilterWidget()
sourcesFilterLayout = QtGui.QHBoxLayout()
sourcesFilterLayout.addWidget(QtGui.QLabel("Filter:"))
sourcesFilterLayout.addWidget(sourcesFilterWidget)

class SourcesResultsWidget(QtGui.QTreeWidget):
  def __init__(self):
    QtGui.QTreeWidget.__init__(self)

    self.setIndentation(0)
    if config['onlyShowKLCode']:
      self.setHeaderLabels([
        "Filename",
        ])
    else:
      self.setHeaderLabels([
        "Filename",
        "Directory"
        ])

    def currentItemChanged(newItem, oldItem):
      currentItem = self.currentItem()
      if currentItem:
        filename = currentItem.text(0)
        pathname = filename
        if config['onlyShowKLCode']:
          pathname = filename
        else:
          directory = currentItem.text(1)
          pathname = os.path.join(directory, filename)
        sourceCodeDisplayWidget.updateDisplay(pathname, 0)
    self.currentItemChanged.connect(currentItemChanged)

    self.setFilter("")

  def setFilter(self, text):
    self.__filter = text
    self.updateDisplay()

  def updateDisplay(self):
    count = 0
    target = debugger.GetSelectedTarget()
    if target and target.IsValid():
      process = target.GetProcess()
      if process and process.IsValid():
        count = target.GetNumModules()

    self.clear()
    if config['onlyShowKLCode']:
      for filename in fabricSourceCode:
        if len(self.__filter) == 0 \
            or (filename is not None and self.__filter in filename):
          tableWidgetItem = QtGui.QTreeWidgetItem()
          tableWidgetItem.setText(0, filename)
          tableWidgetItem.setText(1, '')
          self.addTopLevelItem(tableWidgetItem)
    else:
      for i in range(0, count):
        module = target.GetModuleAtIndex(i)
        compileUnitCount = module.GetNumCompileUnits()
        for j in range(0, compileUnitCount):
          compileUnit = module.GetCompileUnitAtIndex(j)
          fileSpec = compileUnit.GetFileSpec()
          filename = fileSpec.GetFilename()
          directory = fileSpec.GetDirectory()
          if len(self.__filter) == 0 \
              or (filename is not None and self.__filter in filename) \
              or (directory is not None and self.__filter in directory):
            tableWidgetItem = QtGui.QTreeWidgetItem()
            tableWidgetItem.setText(0, filename)
            tableWidgetItem.setText(1, directory)
            self.addTopLevelItem(tableWidgetItem)
    self.sortByColumn(0, QtCore.Qt.AscendingOrder)

sourcesResultsWidget = SourcesResultsWidget()
sourcesFilterWidget.filterChanged.connect(sourcesResultsWidget.setFilter)

sourcesLayout = QtGui.QVBoxLayout()
sourcesLayout.addLayout(sourcesFilterLayout)
sourcesLayout.addWidget(sourcesResultsWidget)

sourcesWidget = QtGui.QWidget()
sourcesWidget.setLayout(sourcesLayout)

class LLDBDisplay(AppendingTextWidget):
  def __init__(self):
    AppendingTextWidget.__init__(self)

    self.__commandColor = QtGui.QColor(QtCore.Qt.blue).lighter(50)
    self.__successOutputColor = QtGui.QColor(QtCore.Qt.green).lighter(50)
    self.__failureOutputColor = QtGui.QColor(QtCore.Qt.green).lighter(50)

  def appendCommand(self, text):
    self.append("> " + text + "\n", self.__commandColor)

  def appendDebuggerOutput(self, text):
    self.append(text, self.__successOutputColor)

  def appendDebuggerErrorOutput(self, text):
    self.append(text, self.__failureOutputColor)

lldbDisplay = LLDBDisplay()

class LLDBCommandWidget(QtGui.QLineEdit):
  def __init__(self, commandInterpreter, lldbDisplay):
    QtGui.QLineEdit.__init__(self)

    self.__commandInterpreter = commandInterpreter
    self.__lldbDisplay = lldbDisplay
    self.__history = []
    self.__historyPos = 0

    self.setFont(font)

    def returnPressedCallback():
      command = str(self.text())
      self.clear()
      if len(command) == 0 and len(self.__history) > 0:
        command = self.__history[len(self.__history)-1]
      self.executeCommand(command)
    self.returnPressed.connect(returnPressedCallback)

  def event(self, event):
    if event.type() == QtCore.QEvent.Type.KeyPress:
      key = event.key()
      if key == QtCore.Qt.Key_Tab:
        text = str(self.text())
        stringList = lldb.SBStringList()
        self.__commandInterpreter.HandleCompletion(
          text, len(text), 1, -1, stringList
          )
        if stringList.GetSize() > 0:
          self.setText(text + stringList.GetStringAtIndex(0))
        return True
      elif key == QtCore.Qt.Key_Up:
        if self.__historyPos > 0:
          self.__historyPos -= 1
          self.setText(self.__history[self.__historyPos])
          self.selectAll()
          return True
      elif key == QtCore.Qt.Key_Down:
        if self.__historyPos < len(self.__history):
          self.__historyPos += 1
          if self.__historyPos == len(self.__history):
            self.setText("")
          else:
            self.setText(self.__history[self.__historyPos])
          self.selectAll()
          return True
    return QtGui.QLineEdit.event(self, event)

  def executeCommand(self, command):
    lldbDisplay.appendCommand(command)
    return_obj = lldb.SBCommandReturnObject()
    self.__commandInterpreter.HandleCommand(command, return_obj)
    if return_obj.Succeeded():
      self.__lldbDisplay.appendDebuggerOutput(return_obj.GetOutput())
    else:
      self.__lldbDisplay.appendDebuggerErrorOutput(return_obj.GetError())
    self.__history.append(command)
    self.__historyPos = len(self.__history)
    stackWidget.updateDisplay()

lldbCommandWidget = LLDBCommandWidget(
  debugger.GetCommandInterpreter(),
  lldbDisplay
  )

lldbCommandLayout = QtGui.QHBoxLayout()
lldbCommandLayout.addWidget(QtGui.QLabel("lldb:"))
lldbCommandLayout.addWidget(lldbCommandWidget)

lldbLayout = QtGui.QVBoxLayout()
lldbLayout.addWidget(lldbDisplay)
lldbLayout.addLayout(lldbCommandLayout)

lldbWidget = QtGui.QWidget()
lldbWidget.setLayout(lldbLayout)

class BreakpointsWidget(QtGui.QTreeWidget):
  class BP(object):
    def __init__(self, file, line):
      self.file = file
      self.line = line
    def __eq__(a, b):
      return a.file == b.file and a.line == b.line

  def __init__(self, sourceCodeDisplay):
    QtGui.QTreeWidget.__init__(self)

    self.__breakpoints = {}
    self.__sourceCodeDisplayWidget = sourceCodeDisplay

    self.setIndentation(12)
    self.setHeaderLabels([
      "ID",
      "Description",
    ])

    settings.beginGroup("BreakpointsWidget")
    self.setColumnWidth(0, int(settings.value("firstColumnWidth", 100)))
    self.setColumnWidth(1, int(settings.value("secondColumnWidth", 300)))
    settings.endGroup()

    def itemWasClicked(item, column):
      bpid = int(item.text(0))
      # [andrew 20140123] applies for internal breakpoints, which we will hide next version
      if not self.__breakpoints.has_key(bpid):
        return
      bp = self.__breakpoints[bpid]
      self.__sourceCodeDisplayWidget.updateDisplay(bp.file, 0)
      self.markBreakpoints()
    self.itemClicked.connect(itemWasClicked)

  def hideEvent(self, event):
    settings.beginGroup("BreakpointsWidget")
    settings.setValue("firstColumnWidth", self.columnWidth(0))
    settings.endGroup()
    QtGui.QTreeWidget.hideEvent(self, event)

  def toggleBreakpoint(self, filename, lineNum):
    # [andrew 20140123] FIXME incorrectly assume unique filenames
    filename = os.path.basename(filename)
    newvalue = BreakpointsWidget.BP(filename, lineNum)
    if newvalue not in self.__breakpoints.values():
      bp = debugger.GetSelectedTarget().BreakpointCreateByLocation(str(filename), int(lineNum))
      self.__breakpoints[bp.id] = newvalue
    else:
      for bpid, bpvalue in self.__breakpoints.iteritems():
        if newvalue == bpvalue:
          debugger.GetSelectedTarget().BreakpointDelete(bpid)
          del self.__breakpoints[bpid]
          break
    self.updateBreakpoints()

  def updateBreakpoints(self):
    self.clear()
    for bp in debugger.GetSelectedTarget().breakpoint_iter():
      item = QtGui.QTreeWidgetItem()
      item.setText(0, str(bp.id))
      item.setText(1, str(bp))
      self.addTopLevelItem(item)
    self.markBreakpoints()

  def markBreakpoints(self):
    lines = []
    # [andrew 20140123] FIXME incorrectly assume unique filenames
    currentFile = os.path.basename(self.__sourceCodeDisplayWidget.pathname)
    for bpid, value in self.__breakpoints.iteritems():
      if value.file == currentFile:
        lines.append(value.line-1)
    self.__sourceCodeDisplayWidget.markBreakpointLines(lines)

breakpointsWidget = BreakpointsWidget(sourceCodeDisplayWidget)
sourceCodeDisplayWidget.setBreakpointsWidget(breakpointsWidget)

stackWidget_dockWidget = QtGui.QDockWidget()
stackWidget_dockWidget.setFeatures(QtGui.QDockWidget.DockWidgetMovable|QtGui.QDockWidget.DockWidgetFloatable)
stackWidget_dockWidget.setWindowTitle("Stack")
stackWidget_dockWidget.setWidget(stackWidget)

threadsWidget_dockWidget = QtGui.QDockWidget()
threadsWidget_dockWidget.setFeatures(QtGui.QDockWidget.DockWidgetMovable|QtGui.QDockWidget.DockWidgetFloatable)
threadsWidget_dockWidget.setWindowTitle("Threads")
threadsWidget_dockWidget.setWidget(threadsWidget)

# sourceCodeDisplayWidget_dockWidget = QtGui.QDockWidget()
# sourceCodeDisplayWidget_dockWidget.setFeatures(QtGui.QDockWidget.DockWidgetMovable|QtGui.QDockWidget.DockWidgetFloatable)
# sourceCodeDisplayWidget_dockWidget.setWindowTitle("Source Code")
# sourceCodeDisplayWidget_dockWidget.setWidget(sourceCodeDisplayWidget)

lldbWidget_dockWidget = QtGui.QDockWidget()
lldbWidget_dockWidget.setFeatures(QtGui.QDockWidget.DockWidgetMovable|QtGui.QDockWidget.DockWidgetFloatable)
lldbWidget_dockWidget.setWindowTitle("LLDB")
lldbWidget_dockWidget.setWidget(lldbWidget)

disassemblyDisplayWidget_dockWidget = QtGui.QDockWidget()
disassemblyDisplayWidget_dockWidget.setFeatures(QtGui.QDockWidget.DockWidgetMovable|QtGui.QDockWidget.DockWidgetFloatable)
disassemblyDisplayWidget_dockWidget.setWindowTitle("Disassembly")
disassemblyDisplayWidget_dockWidget.setWidget(disassemblyDisplayWidget)

localsWidget_dockWidget = QtGui.QDockWidget()
localsWidget_dockWidget.setFeatures(QtGui.QDockWidget.DockWidgetMovable|QtGui.QDockWidget.DockWidgetFloatable)
localsWidget_dockWidget.setWindowTitle("Locals")
localsWidget_dockWidget.setWidget(localsWidget)

registersWidget_dockWidget = QtGui.QDockWidget()
registersWidget_dockWidget.setFeatures(QtGui.QDockWidget.DockWidgetMovable|QtGui.QDockWidget.DockWidgetFloatable)
registersWidget_dockWidget.setWindowTitle("Registers")
registersWidget_dockWidget.setWidget(registersWidget)

outputWidget_dockWidget = QtGui.QDockWidget()
outputWidget_dockWidget.setFeatures(QtGui.QDockWidget.DockWidgetMovable|QtGui.QDockWidget.DockWidgetFloatable)
outputWidget_dockWidget.setWindowTitle("Output")
outputWidget_dockWidget.setWidget(outputWidget)

sourcesWidget_dockWidget = QtGui.QDockWidget()
sourcesWidget_dockWidget.setFeatures(QtGui.QDockWidget.DockWidgetMovable|QtGui.QDockWidget.DockWidgetFloatable)
sourcesWidget_dockWidget.setWindowTitle("Sources")
sourcesWidget_dockWidget.setWidget(sourcesWidget)

breakpointsWidget_dockWidget = QtGui.QDockWidget()
breakpointsWidget_dockWidget.setFeatures(QtGui.QDockWidget.DockWidgetMovable|QtGui.QDockWidget.DockWidgetFloatable)
breakpointsWidget_dockWidget.setWindowTitle("Breakpoints")
breakpointsWidget_dockWidget.setWidget(breakpointsWidget)

class MainWindow(QtGui.QMainWindow):
  def __init__(self, name):
    QtGui.QMainWindow.__init__(self)

    def handler(signum, frame):
      signal.signal(signum, signal.SIG_DFL)
      self.close()
    signal.signal(signal.SIGINT, handler)

    settings.beginGroup("MainWindow")
    self.resize(settings.value("size", QtCore.QSize(800, 600)))
    self.move(settings.value("pos", QtCore.QPoint(200, 200)))
    if settings.value("isMaximized", self.isMaximized()):
      self.showMaximized()
    settings.endGroup()

    self.setTitle(name)

  def setTitle(self, name):
    title = "%s: %s" % (app.applicationName(), name)
    self.setWindowTitle(title)

  def closeEvent(self, event):
    settings.beginGroup("MainWindow")
    settings.setValue("size", self.size())
    settings.setValue("pos", self.pos())
    settings.setValue("isMaximized", self.isMaximized())
    settings.endGroup()

toolBar = QtGui.QToolBar()
actions = []

startAction = toolBar.addAction("Start")
def startCallback():
  lldbCommandWidget.executeCommand("process launch")
startAction.triggered.connect(startCallback)
actions.append(startAction)

interruptAction = toolBar.addAction("Interrupt")
def interruptCallback():
  lldbCommandWidget.executeCommand("process interrupt")
interruptAction.triggered.connect(interruptCallback)
actions.append(interruptAction)

toolBar.addSeparator()

continueAction = toolBar.addAction("Continue")
def continueCallback():
  lldbCommandWidget.executeCommand("process continue")
continueAction.triggered.connect(continueCallback)
actions.append(continueAction)

stepInAction = toolBar.addAction("Step In")
def stepInCallback():
  lldbCommandWidget.executeCommand("thread step-in")
stepInAction.triggered.connect(stepInCallback)
actions.append(stepInAction)

stepOverAction = toolBar.addAction("Step Over")
def stepOverCallback():
  lldbCommandWidget.executeCommand("thread step-over")
stepOverAction.triggered.connect(stepOverCallback)
actions.append(stepOverAction)

stepOutAction = toolBar.addAction("Step Out")
def stepOutCallback():
  lldbCommandWidget.executeCommand("thread step-out")
stepOutAction.triggered.connect(stepOutCallback)
actions.append(stepOutAction)

def updateToolbarItems():
  for action in actions:
    action.setEnabled(False)

  target = debugger.GetSelectedTarget()
  if target and target.IsValid():
    process = target.GetProcess()
    if process and process.IsValid() and process.GetState() != lldb.eStateExited:
      if process.GetState() == lldb.eStateStopped:
        continueAction.setEnabled(True)
        stepInAction.setEnabled(True)
        stepOverAction.setEnabled(True)
        stepOutAction.setEnabled(True)
      else:
        interruptAction.setEnabled(True)
    else:
      startAction.setEnabled(True)

mainWindow = MainWindow('Debugger')
mainWindow.setCentralWidget(sourceCodeDisplayWidget)
mainWindow.addToolBar(toolBar)
mainWindow.addDockWidget(QtCore.Qt.TopDockWidgetArea, localsWidget_dockWidget)
mainWindow.tabifyDockWidget(localsWidget_dockWidget, registersWidget_dockWidget)
mainWindow.addDockWidget(QtCore.Qt.LeftDockWidgetArea, stackWidget_dockWidget)
mainWindow.addDockWidget(QtCore.Qt.RightDockWidgetArea, sourcesWidget_dockWidget)
mainWindow.tabifyDockWidget(sourcesWidget_dockWidget, threadsWidget_dockWidget)
mainWindow.tabifyDockWidget(sourcesWidget_dockWidget, disassemblyDisplayWidget_dockWidget)
mainWindow.addDockWidget(QtCore.Qt.BottomDockWidgetArea, lldbWidget_dockWidget)
mainWindow.addDockWidget(QtCore.Qt.BottomDockWidgetArea, outputWidget_dockWidget)
mainWindow.tabifyDockWidget(outputWidget_dockWidget, breakpointsWidget_dockWidget)
outputWidget_dockWidget.setMinimumWidth(640)
mainWindow.show()

def handleDebuggerEvents():
  event = lldb.SBEvent()
  eventCount = 0
  while debugger.GetListener().GetNextEvent(event):
    eventCount += 1

    # stream = lldb.SBStream()
    # event.GetDescription(stream)
    # print stream.GetData()

    if event.GetBroadcaster().GetName() == "lldb.process":
      target = debugger.GetSelectedTarget()
      process = target.GetProcess()

      process_stdout = process.GetSTDOUT(1024)
      if process_stdout:
        outputWidget.appendStdout(process_stdout)
        while process_stdout:
          process_stdout = process.GetSTDOUT(1024)
          outputWidget.appendStdout(process_stdout)
      process_stderr = process.GetSTDERR(1024)
      if process_stderr:
        outputWidget.appendStderr(process_stderr)
        while process_stderr:
          process_stderr = process.GetSTDERR(1024)
          outputWidget.appendStderr(process_stderr)

      state = lldb.SBProcess.GetStateFromEvent(event)
      if state == lldb.eStateInvalid:
        # Not a state event
        print 'process event = %s' % (event)
      else:
        if state == lldb.eStateStopped:
          didSelectThread = False
          for thread in process:
            frame = thread.GetFrameAtIndex(0)
            shouldSelectThread = False
            shouldDisplay = False

            stopReason = thread.GetStopReason()
            # if self.verbose:
            #   desc = "tid = %#x pc = %#x " % (thread.GetThreadID(),frame.GetPC()),
            if stopReason == lldb.eStopReasonNone:
              pass
            elif stopReason == lldb.eStopReasonTrace:
              shouldSelectThread = True
              shouldDisplay = True
            elif stopReason == lldb.eStopReasonPlanComplete:
              shouldSelectThread = True
            # elif stopReason == lldb.eStopReasonThreadExiting:
            #   lldbDisplay.appendDebuggerOutput("Stop: thread exiting\n")
            elif stopReason == lldb.eStopReasonExec:
              shouldDisplay = True
            elif stopReason == lldb.eStopReasonInvalid:
              pass
            elif stopReason == lldb.eStopReasonException:
              shouldSelectThread = True
              shouldDisplay = True
            elif stopReason == lldb.eStopReasonBreakpoint:
              shouldSelectThread = True
              shouldDisplay = True
            elif stopReason == lldb.eStopReasonWatchpoint:
              shouldSelectThread = True
              shouldDisplay = True
            elif stopReason == lldb.eStopReasonSignal:
              shouldSelectThread = True
              shouldDisplay = True

            if shouldDisplay:
              lldbDisplay.appendDebuggerOutput("STOP %s\n" % thread.GetStopDescription(256))

            if shouldSelectThread and not didSelectThread:
              didSelectThread = process.SetSelectedThread(thread)
        elif state == lldb.eStateExited:
          exit_desc = process.GetExitDescription()
          if exit_desc:
            lldbDisplay.appendDebuggerOutput("Process %u exited with status %u: %s\n" % (process.GetProcessID(), process.GetExitStatus(), exit_desc))
          else:
            lldbDisplay.appendDebuggerOutput("Process %u exited with status %u\n" % (process.GetProcessID(), process.GetExitStatus()))
        elif state == lldb.eStateCrashed:
          lldbDisplay.appendDebuggerOutput("Process %u crashed" % process.GetProcessID())
        elif state == lldb.eStateDetached:
          lldbDisplay.appendDebuggerOutput("Process %u detached" % process.GetProcessID())
        elif state == lldb.eStateRunning:
          # process is running, don't say anything, we will always get one of these after resuming
          pass
        elif state == lldb.eStateUnloaded:
          lldbDisplay.appendDebuggerOutput("Process %u unloaded, this shouldn't happen!!!" % process.GetProcessID())
        elif state == lldb.eStateConnected:
          pass
        elif state == lldb.eStateAttaching:
          pass
        elif state == lldb.eStateLaunching:
          pass
    else:
      print 'Non-process event = %s' % (event)
  if eventCount > 0:
    threadsWidget.updateDisplay()
    sourcesResultsWidget.updateDisplay()
    updateToolbarItems()

timer = QtCore.QTimer()
timer.timeout.connect(handleDebuggerEvents)
timer.start(100)

lldbDisplay.appendDebuggerOutput("Welcome to zBug version %s!\n" % app.applicationVersion())

# [andrew 20140124] for LLDB's own logging messages, enabling different types of these
# is done via the console using "log enable <type> <subtype/all>"
def logToStdout(msg):
  sys.stdout.write(msg)
  sys.stdout.flush()
debugger.SetLoggingCallback(logToStdout)

fabricSocket = None
if config['connectFabric']:
  lldbDisplay.appendDebuggerOutput("Waiting to connect to Fabric Engine process...\n")

  # [andrew 20140314] don't auto-connect if there are arguments passed
  if len(arguments) < 1:
    pidpath = os.environ['HOME']+'/.fabric-engine/.private/fabric.pid'
    try:
      pid = open(pidpath).read()
      os.kill(int(pid), 0)
      options.pid = pid
      print "Found existing Fabric Engine process "+str(pid)
    except Exception as e:
      pass

  class FabricSocket(object):
    def __init__(self):
      self.pending = ''
      self.messages = []
      self.connected = False
      self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
      self.update()

    def update(self, timeout=0):
      # FIXME this needs to triggered on attach/launch
      if not self.connected:
        try:
          self.sock.connect(('127.0.0.1', 3132))
          self.connected = True
          lldbDisplay.appendDebuggerOutput("Connected to Fabric Engine process\n")
        except Exception:
          return
      (r,w,x) = select.select([self.sock.fileno()], [], [], timeout)
      didRead = False
      if len(r) > 0:
        self.handleMessage(self.readMessage())
        didRead = True
      while len(self.messages) > 0:
        self.handleMessage(self.readMessage())
        didRead = True
      return didRead

    def readMessage(self):
      if len(self.messages) > 0:
        return json.loads(self.messages.pop(0))
      while self.pending.find('\n') == -1:
        self.pending += self.sock.recv(20*1024)
      self.messages = self.pending.split('\n')
      self.pending = self.messages.pop()
      return json.loads(self.messages.pop(0))

    def handleMessage(self, data):
      global fabricSourceCode
      if data['cmd'] != 'SourceCode':
        raise Exception('unexpected message from Fabric: '+str(data['cmd']))
      if 'filename' in data['data']:
        filename = data['data']['filename']
        source = data['data']['sourceCode']
        remove = data['data']['remove']
        # [andrew 20140123] FIXME incorrectly assume unique filenames
        if remove == 1:
          del fabricSourceCode[os.path.basename(filename)]
        else:
          fabricSourceCode[os.path.basename(filename)] = source

  fabricSocket = FabricSocket()
  # [andrew 20140306] read all available data
  while fabricSocket.update(0.5):
    pass
  fabricSocket.timer = QtCore.QTimer()
  fabricSocket.timer.timeout.connect(fabricSocket.update)
  fabricSocket.timer.start(100)

lldbCommandWidget.executeCommand(
  "settings set -- auto-confirm true"
  )

if options.pid is not None:
  lldbCommandWidget.executeCommand(
    "process attach --pid=%s" % options.pid
    )
  threadsWidget.updateDisplay()
  sourcesResultsWidget.updateDisplay()
  updateToolbarItems()
else:
  if len(arguments) < 1:
    parser.print_help()
    sys.exit(1)

  # Search PATH for executable
  def resolveExecutable(executable):
    try:
      if stat.S_ISREG(os.stat(executable).st_mode):
        return executable
    except Exception:
      pass

    pathDirs = os.environ['PATH'].split(":")
    for pathDir in pathDirs:
      pathedExecutable = os.path.join(pathDir, executable)
      try:
        if stat.S_ISREG(os.stat(pathedExecutable).st_mode):
          return pathedExecutable
      except Exception:
        pass

    print "Unable to find executable '%s'" % executable
    sys.exit(1)
  executable = resolveExecutable(arguments[0])

  lldbCommandWidget.executeCommand(
    "target create \"%s\"" % executable
    )
  if len(arguments) > 1:
    lldbCommandWidget.executeCommand(
      "settings set -- target.run-args %s" % (" ".join(map(lambda arg: ("\"%s\"" % arg), arguments[1:])))
      )
lldbCommandWidget.setFocus()

updateToolbarItems()

code = app.exec_()
fabricSocket = None
sys.exit(code)
